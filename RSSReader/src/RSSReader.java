import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Intasar Muhiadin
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //open HTML and head tags
        out.println("<html>");
        out.println("<head>");

        //check if title has a child, prints if so
        int titleName = getChildElement(channel, "title");
        if (channel.child(titleName).numberOfChildren() > 0) {
            out.println("<title>" + channel.child(titleName).child(0).label()
                    + "</title>");
        } else {
            out.println("<title> " + "Empty Title" + " </title>");
        }
        //close head tag, open body tag
        out.println("</head>");
        out.println("<body>");

        //creates a link of the channel title
        int link = getChildElement(channel, "link");
        out.println("<h1><a href =\"" + channel.child(link).child(0).label()
                + "\">" + channel.child(titleName).child(0).label()
                + "</a></h1>");

        // prints channel description if available
        int description = getChildElement(channel, "description");
        if (channel.child(description).numberOfChildren() > 0) {
            out.println("<p>" + channel.child(description).child(0).label()
                    + "</p>");
        } else {
            out.println("<p> " + "No Description" + " </p>");
        }

        //table header
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th> Date </th>");
        out.println("<th> Source </th>");
        out.println("<th> News </th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //close table, body, and HTML tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;

        int nodes = xml.numberOfChildren();
        // loop through the children to find tag
        for (int i = 0; i < nodes; i++) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {

        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        //print publication date if it exists
        int pubDate = getChildElement(item, "pubDate");

        if (pubDate != -1) {
            String pubDatePrint = item.child(pubDate).child(0).label();
            out.println("<td>" + pubDatePrint + "</td>");
        } else {
            out.println("<td> No date avaliable. </td>");
        }

        //if source exists, prints source and link
        int source = getChildElement(item, "source");

        if (source != -1) {
            String sourcePrint = item.child(source).child(0).label();

            String sourceUrl = "";
            //prints url of source if it exists
            if (item.child(source).hasAttribute("url")) {
                sourceUrl = item.child(source).attributeValue("url");
                out.println("<td><a href =\"" + sourceUrl + "\">" + sourcePrint
                        + "</a></td>");
            } else {
                out.println("<td>" + sourcePrint + "</td>");
            }

        } else {
            out.println("<td> No source avaliable. </td>");

        }

        //prints title or description link if available
        int title = getChildElement(item, "title");
        String titlePrint = "";

        if (title != -1) {
            titlePrint = item.child(title).child(0).label();
        }

        int description = getChildElement(item, "description");
        String descriptionPrint = "";

        if (description != -1) {
            descriptionPrint = item.child(description).child(0).label();
        }

        String linkUrl = "";
        int link = getChildElement(item, "link");

        if (link != -1) {
            linkUrl = item.child(link).child(0).label();
        }

        if (titlePrint.length() > 0) {
            out.println("<td><a href =\"" + linkUrl + "\">" + titlePrint
                    + "</a></td>");
        } else if (descriptionPrint.length() > 0) {
            out.println("<td><a href =\"" + linkUrl + "\">" + descriptionPrint
                    + "</a></td>");
            //if neither exists
        } else {
            out.println("<td><a href =\"" + linkUrl
                    + "\">No Link Available</a></td>");
        }

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree xml = new XMLTree1(url);

        //validation for RSS feed format
        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            XMLTree channel = xml.child(0);
            outputHeader(channel, out);

            // prints channel description if available
            int description = getChildElement(channel, "description");
            if (channel.child(description).numberOfChildren() > 0) {
                out.println("<p>" + channel.child(description).child(0).label()
                        + "</p>");
            } else {
                out.println("<p> " + "No Description" + " </p>");
            }

            //writes out the HTML
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                XMLTree item = channel.child(i);
                if (item.label().equals("item")) {
                    processItem(item, out);
                }
            }

            outputFooter(out);
        } else {
            out.println("This is not a RSS feed.");
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Input the source URL.
         */
        out.print("Enter a XML File: ");
        String url = in.nextLine();

        /*
         * Read XML input and initialize XMLTree.
         */
        XMLTree xml = new XMLTree1(url);

        //validation for RSS feed format checkk
        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            //user inputs an output file
            out.print("Enter a output file: ");
            String fileName = in.nextLine();

            SimpleWriter fileout = new SimpleWriter1L(fileName);

            processFeed(url, fileName, fileout);
        } else {
            out.println("This is an invalid output file.");

        }

        in.close();
        out.close();

    }

}
